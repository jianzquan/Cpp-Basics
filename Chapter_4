# 4-1 数组
#include <iostream>

int main()
{
    using namespace std;
    int yams[3];  // 创建包含3个元素大小的数组
    yams[0] = 7;
    yams[1] = 8;
    yams[2] = 6;

    int yamcosts[3] = {20,30,5};  // 初始化列表

    cout << "Total yams = ";
    cout << yams[0] + yams[1] + yams[2] << endl;
    cout << "The package with " << yams[1] << " yams costs ";
    cout << yamcosts[1] << " cents per yam.\n";
    int total = yams[0] * yamcosts[0] + yams[1] * yamcosts[1];
    total = total + yams[2] * yamcosts[2];
    cout << "The total yam expense is " << total << " cents.\n";

    cout << "\nSize of yams array = " << sizeof yams;
    cout << " bytes.\n";
    cout << "Size of one element = " << sizeof yams[0];
    cout << " bytes.\n";
    return 0;
}


# 4-2 字符数组长度
#include <iostream>
#include <cstring>
int main()
{
    using namespace std;
    const int Size = 15;
    char name1[Size];
    char name2[Size] = "C++owboy";
    
    cout << "Howdy! I'm " << name2;
    cout << "! What's your name?\n";
    cin >> name1;
    cout << "Well, " << name1 << ", your name has ";
    cout << strlen(name1) << " letters and is stored\n";  // strlen 只计算可见的字符，不把空字符计算在内，所以存储字符所需长度至少是strlen(str)+1
    cout << "in an array of " << sizeof(name1) << " bytes.\n";  // sizeof 返回整个数组的长度(char是1字节)
    cout << "Your initial is " << name1[0] << ".\n";
    name2[3] = '\0';  // 一个字符串是以空字符作为结尾的，所以说碰到空字符就代表了这个字符串后面不算了
    cout << "Here are the first 3 characters of my name: ";
    cout << name2 << endl;

    return 0;
}


# 4-3-5 整行字符数组输入
#include <iostream>
int main()
{
    using namespace std;
    const int ArSize = 20;
    char name[ArSize];
    char dessert[ArSize];

    // cin 只能读取一个字符串，遇到（空格、制表符、换行符）就确定字符串的结束位置了
    cout << "Enter your name:\n";
    cin >> name;
    cout << "Enter your favorite dessert:\n";
    cin >> dessert;
    cout << "I have some delicious " << dessert;
    cout << " for you, " << name << ".\n";

    // getline 每次读取一行，通过行换符确定结尾
    cout << "Enter your name:\n";
    cin.getline(name, ArSize);  
    cout << "Enter your favorite dessert:\n";
    cin.getline(dessert, ArSize);
    cout << "I have some delicious " << dessert;
    cout << " for you, " << name << ".\n";

    //
    cout << "Enter your name:\n";
    cin.get(name, ArSize).get();  
    cout << "Enter your favorite dessert:\n";
    cin.get(dessert, ArSize).get();
    cout << "I have some delicious " << dessert;
    cout << " for you, " << name << ".\n";

    return 0;
}


# 4-6 数组 get() 和 getline()
#include <iostream>
int main()
{
    using namespace std;
    cout << "What year was your house built?\n";
    int year;
    // cin >> year;  //按下回车键后，换行符会留在输入队列中，会导致getline()误认为是一个空行
    // cin.get();  //将上一步遗留的换行符取出
    (cin >> year).get();
    cout << "What is its street address?\n";
    char address[80];
    cin.getline(address, 80);
    cout << "Year built: " << year << endl;
    cout << "Address: " << address << endl;
    cout << "Done!\n";

    return 0;
}


# 4-7 字符数组 和 字符串
#include <iostream>
#include <string>
int main()
{
    using namespace std;
    char charr1[20];
    char charr2[20] = "jaguar";
    string str1;
    string str2 = "panther";

    cout << "Enter a kind of feline: ";
    cin >> charr1;
    cout << "Enter another kind of feline: ";
    cin >> str1;
    cout << "Here are some felines: \n";
    cout << charr1 << " " << charr2 << " "
         << str1 << " " << str2
         << endl;
    cout << "The third letter in " << charr2 << " is "
         << charr2[2] << endl;
    cout << "The third letter in " << str2 << " is "
         << str2[2] << endl;

    return 0;
}


# 4-8 字符串赋值、相加、拼接
#include <iostream>
#include <string>
int main()
{
    using namespace std;
    string s1 = "penguin";
    string s2, s3;

    cout << "You can assign one string object to another: s2 = s1 \n";
    s2 = s1;
    cout << "s1: " << s1 << ", s2: " << s2 << endl;
    cout << "You can assign a C-style string to a string object.\n";
    cout << "s2 = \"buzzard\"\n";
    s2 = "buzzard";  // 字符串赋值
    cout << "s2: " << s2 << endl;
    cout << "You can concatenate strings: s3 = s1 + s2\n";
    s3 = s1 + s2;  // 字符串相加 
    cout << "s3: " << s3 << endl;
    cout << "You can append strings.\n";
    s1 += s2;
    cout << "s1 += s2 yields s1 = " << s1 << endl;
    s2 += " for a day";  // 字符串拼接
    cout << "s2 += \" for a day\" yields s2 = " << s2 << endl;

    return 0;
}


# 4-9 字符串拼接
#include <iostream>
#include <string>
#include <cstring>
int main()
{
    using namespace std;
    char charr1[20];
    char charr2[20] = "jaguar";
    string str1;
    string str2 = "panther";

    str1 = str2;  // 复制str2到str1
    strcpy(charr1, charr2);  // 复制charr2到charr1
    str1 += " paste";  // 字符串拼接
    strcat(charr1, " juice");  // 字符数组增加

    int len1 = str1.size();  // 字符串长度,不能strlen(str1)
    int len2 = strlen(charr1);  //字符数组长度,不能charr1.size()


    cout << "The string " << str1 << " constains "
         << len1 << " characters.\n";
    cout << "The string " << charr1 << " contains " 
         << len2 << " characters.\n";

    return 0;
}


# 4-10 字符串长度
#include <iostream>
#include <string>
#include <cstring>

int main()
{
    using namespace std;
    char charr[20];
    string str;

    cout << "Length of string in charr before input: "
         << strlen(charr) << endl;  // 从第一个元素开始计算字节数，直到遇到空字符。
    cout << "Length of string in str before input: "
         << str.size() << endl;
    cout << "Enter a line of text:\n";
    cin.getline(charr, 20);  // 句点表示法：函数getline()是istream类的一个类方法
    cout << "You entered: " << charr << endl;
    cout << "Enter another line of texr: \n";
    getline(cin, str); 
    cout << "You entered: " << str << endl;
    cout << "Length of string in charr after input: "
         << strlen(charr) << endl;
    cout << "Length of string in str after input: "
         << str.size() << endl;

    return 0;
}


# 4-11 结构体
#include <iostream>

struct inflatable
{
    char name[20];
    float volumn;
    double price;
};

int main()
{
    using namespace std;
    inflatable guest = {
        "Glorious Gloria",
        1.88,
        29.99
    };
    inflatable pa1 = {
        "Audacious Arthur",
        3.12,
        32.99
    };

    cout << "Expand your guest list with" << guest.name;
    cout << " and " << pa1.name << "!\n";
    cout << "You can have both for $";
    cout << guest.price + pa1.price << "!\n";

    return 0;
}


# 4-12 结构体成员
#include <iostream>
struct inflatable
{
    char name[20];
    float volumn;
    double price;
};

int main()
{
    using namespace std;
    inflatable bouquet = {"sunflowers", 0.20, 12.49};
    inflatable choice;
    cout << "bouquet: " << bouquet.name << " for $";
    cout << bouquet.price << endl;

    choice = bouquet;
    cout << "choice: " << choice.name << " for $";
    cout << choice.price << endl;

    return 0;
}


# 4-13 结构体数组
#include <iostream>
struct inflatable
{
    char name[20];
    float volumn;
    double price;
};

int main()
{
    using namespace std;
    inflatable guest[2] = {
        {"Bambi", 0.5, 21.99},
        {"Godzlla", 2000, 565.99}
    };

    cout << "The guests " << guest[0].name << " and " << guest[1].name
         << "\nhave a combined volumn of "
         << guest[0].volumn + guest[1].volumn << " cubic feet.\n";

    return 0;
}


# 4-14 取地址
#include <iostream>
int main()
{
    using namespace std;
    int donuts = 6;
    double cups = 4.5;

    cout << "donuts value = " << donuts;
    cout << " and donuts address = " << &donuts << endl;
    cout << "cups value = " << cups;
    cout << " and cups address = " << &cups << endl;

    return 0;
}


# 4-15 指针
#include <iostream>
int main()
{
    using namespace std;
    int updates = 6;
    int *p_updates;
    p_updates = &updates;

    cout << "Values: updates = " << updates;
    cout << ", *p_updates = " << *p_updates << endl;

    cout << "Addresses: &updates = " << &updates;
    cout << ", p_updates = " << p_updates << endl;

    *p_updates = *p_updates + 1;
    cout << "Now updates = " << updates << endl;

    return 0;
}


# 4-16 解引用
#include <iostream>
int main()
{
    using namespace std;
    int higgens = 5;
    int *pt = &higgens;

    cout << "Value of higgens = " << higgens
         << "; Address of higgens = " << &higgens << endl;
    cout << "Value of *pt = " << *pt
         << "; Value of pt = " << pt << endl;

    return 0;
}


# 4-17 指针2
#include <iostream>
int main()
{
    using namespace std;
    int nights = 1001;
    int *pt = new int;
    *pt = 1001;

    cout << "nights value = ";
    cout << nights << "; location " << &nights << endl;
    cout << "int ";
    cout << "value = " << *pt << ": location = " << pt << endl;
    
    double *pd = new double;
    *pd = 10000001.0;

    cout << "double ";
    cout << "value = " << *pd << ": location = " << pd << endl;
    cout << "location of pointer pd: " << &pd << endl;  
    cout << "size of pt = " << sizeof(pt);
    cout << ": size of *pt = " << sizeof(*pt) << endl;
    cout << "size of pd = " << sizeof pd;
    cout << ": size of *pd = " << sizeof(*pd) << endl;

    return 0;
}


# 4-18 数组与指针
#include <iostream>
int main()
{
    using namespace std;
    double *p3 = new double[3];  // 指针指向数组的第一个元素
    p3[0] = 0.2;  // 指针当作数组名来使用即可
    p3[1] = 0.5;
    p3[2] = 0.8;
    cout << "p3[1] is " << p3[1] << ".\n";
    p3 = p3 + 1; // 指针指向数组的第二个元素了，所以p3[0]=0.5了。
    cout << "Now p3[0] is " << p3[0] << " and ";
    cout << "p3[1] is " << p3[1] << ".\n";
    p3 = p3 - 1;
    delete []p3;

    return 0;
}


# 4-19 指针与数组
#include <iostream>
int main()
{
    using namespace std;
    double wages[3] = {10000.0, 20000.0, 30000.0};
    short stacks[3] = {3, 2, 1};
    double *pw = wages;  // 数组名就是数组中第一个元素的地址
    short *ps = &stacks[0]; 
    cout << "pw = " << pw << ", *pw = " << *pw << endl;
    pw = pw + 1;
    cout << "add 1 to the pw pointer:\n";
    cout << "pw = " << pw << ", *pw = " << *pw << "\n\n";
    
    cout << "ps = " << ps << ", *ps = " << *ps << endl;
    ps = ps + 1;
    cout << "add 1 to the ps pointer:\n";
    cout << "ps = " << ps << ", *ps = " << *ps << "\n\n";

    cout << "access two elements with array notation\n";
    cout << "stacks[0] = " << stacks[0]
         << ", stacks[1] = " << stacks[1] << endl;
    cout << "access two elements with pointer notation\n";
    cout << "*stacks = " << *stacks
         << ", *(stacks + 1) = " << *(stacks + 1) << endl;

    cout << sizeof(wages) << " = size of wages array\n";
    cout << sizeof(pw) << " = size of pw pointer\n";

    return 0;
}


# 4-20 字符数组与指针
#include <iostream>
#include <cstring>

int main()
{
    using namespace std;
    char animal[20] = "bear";
    const char* bird = "wren";
    char* ps;

    cout << animal << " and ";
    cout << bird << "\n";
    
    cout << "Enter a kind of animal: ";
    cin >> animal;
    ps = animal;  // 只是将地址赋值给了ps
    cout << ps << "!\n";
    cout << "Before using strcpy():\n";
    cout << animal << " at " << (int*)animal << endl;  // 指针类型为char*，使用cout将显示指向的字符串；强转为int*，才会显示地址
    cout << ps << " at " << (int*)ps << endl;

    ps = new char[strlen(animal) + 1];  
    strcpy(ps, animal);  // strcpy(para1, para2):第一个是目标地址，第二个是要复制的字符串地址
    cout << "After using strcpy():\n";
    cout << animal << " at " << (int*)animal << endl;
    cout << ps << " at " << (int*)ps << endl;
    delete []ps;

    return 0;
}


# 4-21 结构体与指针
#include <iostream>
struct inflatable
{
    char name[20];
    float volumn;
    double price;
};

int main()
{
    using namespace std;
    inflatable *ps = new inflatable; // 创建未命名的inflatable类型，并将其地址赋给一个指针
    cout << "Enter name of inflatable item: ";
    cin.get(ps->name, 20);
    cout << "Enter volumn in cubic feet: ";
    cin >> (*ps).volumn;
    cout << "Enter price: $";
    cin >> ps->price;
    cout << "Name: " << (*ps).name << endl;
    cout << "Volumn: " << ps->volumn << " cubic feet\n";
    cout << "Price: $" << ps->price << endl;

    delete ps;
    return 0;
}


# 4-22 函数与指针
#include <iostream>
#include <cstring>
using namespace std;
char * getname(void); // 声明函数原型

int main()
{
    char *name;
    name = getname(); // getname()返回的是一个指向某块内存的地址
    cout << name << " at " << (int *)name << "\n";
    delete []name;

    name = getname();
    cout << name << " at " << (int *)name << "\n";
    delete []name;

    return 0;
}

char *getname()
{
    char temp[80];
    cout << "Enter last name: ";
    cin >> temp;
    char *pn = new char[strlen(temp) + 1]; // 新分配一块内存存放输入的数据
    strcpy(pn, temp);

    return pn;
}


# 4-23 指针数组
#include <iostream>
struct antarctica_year_end
{
    int year;
};

int main()
{
    antarctica_year_end s01, s02, s03; // 创建这种结构类型的变量
    s01.year = 1998;
    antarctica_year_end *pa = &s02;
    pa->year = 1999;
    antarctica_year_end trio[3]; // 创建结构数组
    trio[0].year = 2003; // 使用成员运算符访问元素的成员. trio是一个数组,trio[0]是一个结构变量,trio[0].year是该结构的一个成员
    std::cout << trio->year << std::endl;  // 数组名是一个指针，因此可以使用间接成员运算符
    const antarctica_year_end *arp[3] = {&s01, &s02, &s03}; // 创建指针数组，arp是一个指针数组，arp[1]是一个指针
    std::cout << arp[1]->year << std::endl;
    const antarctica_year_end **ppa = arp; // arp是一个数组名称，是第一个元素(是指针)的地址
    auto ppb = arp; // 上面的定义容易出错，C++11提供auto版本
    std::cout << (*ppa)->year << std::endl;
    std::cout << (*(ppb+1))->year << std::endl;

    return 0;
}


# 4-24 数组、vector、array
#include <iostream>
#include <vector>
#include <array>
int main()
{
    using namespace std;
    double a1[4] = {1.2, 2.4, 3.6, 4.8};
    vector<double> a2(4);
    a2[0] = 1.0/3.0;
    a2[1] = 1.0/5.0;
    a2[2] = 1.0/7.0;
    a2[3] = 1.0/9.0;
    array<double, 4> a3 = {3.14, 2.72, 1.62, 1.41};
    array<double, 4> a4;
    a4 = a3;
    cout << "a1[2]: " << a1[2] << " at " << &a1[2] << endl;
    cout << "a2[2]: " << a2[2] << " at " << &a2[2] << endl;
    cout << "a3[2]: " << a3[2] << " at " << &a3[2] << endl;
    cout << "a4[2]: " << a4[2] << " at " << &a4[2] << endl;
    
    a1[-2] = 20.2; // 超界错误
    cout << "a1[-2]: " << a1[-2] << " at " << &a1[-2] << endl;
    cout << "a3[2]: " << a3[2] << " at " << &a3[2] << endl;
    cout << "a4[2]: " << a4[2] << " at " << &a4[2] << endl;

    return 0;
}

